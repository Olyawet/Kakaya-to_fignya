class TypingAnimation {
    constructor(element, text, speed = 50) {
        this.element = element;
        this.text = text;
        this.speed = speed;
        this.currentIndex = 0;
        this.isTyping = false;
    }

    async type() {
        if (this.isTyping) return;
        
        this.isTyping = true;
        this.element.textContent = '';
        this.element.classList.add('typing');
        
        for (let i = 0; i < this.text.length; i++) {
            this.element.textContent += this.text[i];
            await this.sleep(this.speed);
        }
        
        this.element.classList.remove('typing');
        this.isTyping = false;
    }

    sleep(ms) {
        return new Promise(resolve => setTimeout(resolve, ms));
    }
}

class Game {
    constructor() {
        this.currentScreen = 'start';
        this.gameMode = null;
        this.initializeElements();
        this.bindEvents();
    }

    initializeElements() {
        this.startScreen = document.getElementById('start-screen');
        this.questionScreen = document.getElementById('question-screen');
        this.clearQuestionScreen = document.getElementById('clear-question-screen');
        this.responseScreen = document.getElementById('response-screen');
        this.questionText = document.getElementById('question-text');
        this.clearQuestionText = document.getElementById('clear-question-text');
        this.responseText = document.getElementById('response-text');
        this.startUnclearBtn = document.getElementById('start-unclear-btn');
        this.startClearBtn = document.getElementById('start-clear-btn');
        this.restartBtn = document.getElementById('restart-btn');
        this.laughSound = document.getElementById('laugh-sound');
    }

    bindEvents() {
        this.startUnclearBtn.addEventListener('click', () => this.startUnclearGame());
        this.startClearBtn.addEventListener('click', () => this.startClearGame());
        this.restartBtn.addEventListener('click', () => this.restartGame());
        
        document.querySelectorAll('.option-btn').forEach(btn => {
            btn.addEventListener('click', (e) => this.handleAnswer(e.target.dataset.answer));
        });
    }

    async showScreen(screenId) {
        // –°–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ —ç–∫—Ä–∞–Ω—ã
        [this.startScreen, this.questionScreen, this.clearQuestionScreen, this.responseScreen].forEach(screen => {
            screen.classList.remove('active');
        });

        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω—É–∂–Ω—ã–π —ç–∫—Ä–∞–Ω
        const targetScreen = document.getElementById(screenId);
        targetScreen.classList.add('active');
        
        // –î–æ–±–∞–≤–ª—è–µ–º —ç—Ñ—Ñ–µ–∫—Ç –ø–æ—è–≤–ª–µ–Ω–∏—è
        targetScreen.classList.add('fade-in');
        setTimeout(() => targetScreen.classList.remove('fade-in'), 500);
    }

    async startUnclearGame() {
        this.gameMode = 'unclear';
        this.currentScreen = 'question';
        await this.showScreen('question-screen');
        
        const typing = new TypingAnimation(this.questionText, '–ü—Ä–∏–≤–µ—Ç! –¢—ã –∫—Ç–æ?', 80);
        await typing.type();
        
        // –î–æ–±–∞–≤–ª—è–µ–º —ç—Ñ—Ñ–µ–∫—Ç –ø–æ—è–≤–ª–µ–Ω–∏—è –∫–Ω–æ–ø–æ–∫
        document.querySelectorAll('.option-btn').forEach((btn, index) => {
            setTimeout(() => {
                btn.classList.add('bounce');
                setTimeout(() => btn.classList.remove('bounce'), 600);
            }, index * 200);
        });
    }

    async startClearGame() {
        this.gameMode = 'clear';
        this.currentScreen = 'clear-question';
        await this.showScreen('clear-question-screen');
        
        const typing = new TypingAnimation(this.clearQuestionText, '–ß—Ç–æ —Ç—ã –ª—é–±–∏—à—å –ø–∏—Ç—å?', 80);
        await typing.type();
        
        // –î–æ–±–∞–≤–ª—è–µ–º —ç—Ñ—Ñ–µ–∫—Ç –ø–æ—è–≤–ª–µ–Ω–∏—è –∫–Ω–æ–ø–æ–∫
        document.querySelectorAll('.option-btn').forEach((btn, index) => {
            setTimeout(() => {
                btn.classList.add('bounce');
                setTimeout(() => btn.classList.remove('bounce'), 600);
            }, index * 200);
        });
    }

    async handleAnswer(answer) {
        this.currentScreen = 'response';
        await this.showScreen('response-screen');
        
        if (this.gameMode === 'unclear') {
            switch (answer) {
                case 'ded':
                    await this.handleDedAnswer();
                    break;
                case 'who':
                    await this.handleWhoAnswer();
                    break;
                case 'dunno':
                    await this.handleDunnoAnswer();
                    break;
            }
        } else if (this.gameMode === 'clear') {
            switch (answer) {
                case 'coffee':
                    await this.handleCoffeeAnswer();
                    break;
                case 'tea':
                    await this.handleTeaAnswer();
                    break;
                case 'water':
                    await this.handleWaterAnswer();
                    break;
                case 'nothing':
                    await this.handleNothingAnswer();
                    break;
            }
        }
    }

    async handleDedAnswer() {
        const responses = [
            '–ê —è –∫–æ–Ω—å –≤ –ø–∞–ª—å—Ç–æ!',
            '–•–∞-—Ö–∞-—Ö–∞! üòÇ',
            '–ù—É —Ç—ã –∏ –∑–∞–±–∞–≤–Ω—ã–π!',
            '–ú–æ–∂–µ—Ç –±—ã—Ç—å —Ç—ã –∏ –ø—Ä–∞–≤...',
            '–ê –º–æ–∂–µ—Ç –∏ –Ω–µ—Ç! üòÑ'
        ];

        for (let i = 0; i < responses.length; i++) {
            const typing = new TypingAnimation(this.responseText, responses[i], 60);
            await typing.type();
            
            if (i === 1) {
                // –í–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏–º –∑–≤—É–∫ —Å–º–µ—Ö–∞
                this.playLaughSound();
                this.createParticles();
            }
            
            if (i < responses.length - 1) {
                await this.sleep(2000);
            }
        }
        
        await this.sleep(3000);
        this.showRestartButton();
    }

    async handleWhoAnswer() {
        const responses = [
            '–Ø –Ω–µ–∑–Ω–∞–∫–æ–º–µ—Ü.',
            '–•–æ—Ç—è...',
            '–Ø –∫–æ—Ä–æ—á–µ, –∏–¥—É –Ω–∞ –∫–∞—á–µ–ª–∏.',
            '–û–π... –ù–µ –∑–Ω–∞—é, –∫–∞–∫ —ç—Ç–æ –≤–æ–æ–±—â–µ —Å–≤—è–∑–∞–Ω–æ',
            '–í –æ–±—â–µ–º...',
            '–Ø —Ç–æ–∂–µ –¥–µ–¥ –≤ –ø–µ—Ö—Ç–æ, —Ç–æ–ª—å–∫–æ –µ—â—ë –ª—é–±–∏—Ç–µ–ª—å –∫–∞—á–∞—Ç—å—Å—è –Ω–∞ –∫–∞—á–µ–ª—è—Ö.'
        ];

        const delays = [3000, 5000, 4000, 3000, 3000, 4000];

        for (let i = 0; i < responses.length; i++) {
            const typing = new TypingAnimation(this.responseText, responses[i], 70);
            await typing.type();
            
            if (i < responses.length - 1) {
                await this.sleep(delays[i]);
            }
        }
        
        this.showRestartButton();
    }

    async handleDunnoAnswer() {
        const typing = new TypingAnimation(this.responseText, '–í–æ—Ç —è —Ç–æ–∂–µ –Ω–µ –∑–Ω–∞—é! :(', 80);
        await typing.type();
        
        await this.sleep(3000);
        this.showRestartButton();
    }

    async handleCoffeeAnswer() {
        const responses = [
            '–ö–æ—Ñ–µ? –û—Ç–ª–∏—á–Ω—ã–π –≤—ã–±–æ—Ä! ‚òï',
            '–ó–Ω–∞–µ—à—å, –∫–æ—Ñ–µ - —ç—Ç–æ –Ω–µ –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—Ç–æ–∫...',
            '–≠—Ç–æ —Ñ–∏–ª–æ—Å–æ—Ñ–∏—è –∂–∏–∑–Ω–∏!',
            '–ö–∞–∂–¥—ã–π –≥–ª–æ—Ç–æ–∫ - —ç—Ç–æ –Ω–æ–≤–∞—è –∏—Å—Ç–æ—Ä–∏—è...',
            '–ê —Ç—ã –∑–Ω–∞–µ—à—å, —á—Ç–æ –∫–æ—Ñ–µ –æ—Ç–∫—Ä—ã–ª–∏ –∫–æ–∑—ã?',
            '–ü—Ä–∞–≤–¥–∞! –û–Ω–∏ —Å—Ç–∞–ª–∏ —Ç–∞–Ω—Ü–µ–≤–∞—Ç—å –ø–æ—Å–ª–µ —Ç–æ–≥–æ, –∫–∞–∫ —Å—ä–µ–ª–∏ –∫–æ—Ñ–µ–π–Ω—ã–µ —è–≥–æ–¥—ã! üêêüíÉ'
        ];

        for (let i = 0; i < responses.length; i++) {
            const typing = new TypingAnimation(this.responseText, responses[i], 70);
            await typing.type();
            
            // –î–æ–±–∞–≤–ª—è–µ–º —ç—Ñ—Ñ–µ–∫—Ç –∫–æ—Ñ–µ
            this.responseText.classList.add('coffee-effect');
            
            if (i < responses.length - 1) {
                await this.sleep(2500);
            }
        }
        
        this.responseText.classList.remove('coffee-effect');
        await this.sleep(3000);
        this.showRestartButton();
    }

    async handleTeaAnswer() {
        const responses = [
            '–ß–∞–π? –ö–ª–∞—Å—Å–∏–∫–∞! üçµ',
            '–ó–Ω–∞–µ—à—å, —á–∞–π –±—ã–≤–∞–µ—Ç —Ä–∞–∑–Ω—ã–π...',
            '–ß—ë—Ä–Ω—ã–π, –∑–µ–ª—ë–Ω—ã–π, –±–µ–ª—ã–π, —É–ª—É–Ω...',
            '–ê —Ç—ã –∫–∞–∫–æ–π –ª—é–±–∏—à—å?',
            '–•–æ—Ç—è... –ø–æ–¥–æ–∂–¥–∏...',
            '–Ø –∂–µ –Ω–µ –¥–æ–ª–∂–µ–Ω —Å–ø—Ä–∞—à–∏–≤–∞—Ç—å! üòÖ',
            '–¢—ã —É–∂–µ —Å–∫–∞–∑–∞–ª - —á–∞–π!'
        ];

        for (let i = 0; i < responses.length; i++) {
            const typing = new TypingAnimation(this.responseText, responses[i], 70);
            await typing.type();
            
            // –î–æ–±–∞–≤–ª—è–µ–º —ç—Ñ—Ñ–µ–∫—Ç —á–∞—è
            this.responseText.classList.add('tea-effect');
            
            if (i < responses.length - 1) {
                await this.sleep(2000);
            }
        }
        
        this.responseText.classList.remove('tea-effect');
        await this.sleep(3000);
        this.showRestartButton();
    }

    async handleWaterAnswer() {
        const responses = [
            '–í–æ–¥–∞? –°–∞–º—ã–π –∑–¥–æ—Ä–æ–≤—ã–π –≤—ã–±–æ—Ä! üíß',
            '–ó–Ω–∞–µ—à—å, –≤–æ–¥–∞ –ø–æ–∫—Ä—ã–≤–∞–µ—Ç 71% –ø–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç–∏ –ó–µ–º–ª–∏...',
            '–ò 100% –ø–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç–∏ –º–æ–µ–≥–æ —Å—Ç–æ–ª–∞ –ø–æ—Å–ª–µ —Ç–æ–≥–æ, –∫–∞–∫ —è –µ—ë –ø—Ä–æ–ª–∏–ª! üòÇ',
            '–•–æ—Ç—è —ç—Ç–æ –±—ã–ª–æ –¥–∞–≤–Ω–æ...',
            '–¢–µ–ø–µ—Ä—å —è –ø—å—é –∏–∑ —Å—Ç–∞–∫–∞–Ω–∞ —Å –∫—Ä—ã—à–∫–æ–π!',
            '–£–º–Ω—ã–µ –ª—é–¥–∏ —É—á–∞—Ç—Å—è –Ω–∞ —Å–≤–æ–∏—Ö –æ—à–∏–±–∫–∞—Ö! üß†'
        ];

        for (let i = 0; i < responses.length; i++) {
            const typing = new TypingAnimation(this.responseText, responses[i], 70);
            await typing.type();
            
            // –î–æ–±–∞–≤–ª—è–µ–º —ç—Ñ—Ñ–µ–∫—Ç –≤–æ–¥—ã
            this.responseText.classList.add('water-effect');
            
            if (i < responses.length - 1) {
                await this.sleep(2500);
            }
        }
        
        this.responseText.classList.remove('water-effect');
        await this.sleep(3000);
        this.showRestartButton();
    }

    async handleNothingAnswer() {
        const responses = [
            '–ù–∏—á–µ–≥–æ? –ò–Ω—Ç–µ—Ä–µ—Å–Ω–æ... ü§î',
            '–ó–Ω–∞–µ—à—å, –Ω–∏—á–µ–≥–æ - —ç—Ç–æ —Ç–æ–∂–µ —á—Ç–æ-—Ç–æ!',
            '–≠—Ç–æ –∫–∞–∫ –Ω–æ–ª—å - –æ–Ω —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –Ω–æ –µ–≥–æ –Ω–µ—Ç!',
            '–§–∏–ª–æ—Å–æ—Ñ—Å–∫–∏–π –≤–æ–ø—Ä–æ—Å –ø–æ–ª—É—á–∞–µ—Ç—Å—è...',
            '–ê –º–æ–∂–µ—Ç —Ç—ã –ø—Ä–æ—Å—Ç–æ –Ω–µ —Ö–æ—á–µ—à—å –ø—Ä–∏–∑–Ω–∞–≤–∞—Ç—å—Å—è? üòè',
            '–ò–ª–∏ —Ç—ã —Ä–æ–±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π –Ω–µ –ø—å—ë—Ç –∂–∏–¥–∫–æ—Å—Ç–∏? ü§ñ',
            '–•–æ—Ç—è —Ä–æ–±–æ—Ç—ã —Ç–æ–∂–µ –Ω—É–∂–¥–∞—é—Ç—Å—è –≤ –æ—Ö–ª–∞–∂–¥–µ–Ω–∏–∏!'
        ];

        for (let i = 0; i < responses.length; i++) {
            const typing = new TypingAnimation(this.responseText, responses[i], 70);
            await typing.type();
            
            // –î–æ–±–∞–≤–ª—è–µ–º —ç—Ñ—Ñ–µ–∫—Ç "–Ω–∏—á–µ–≥–æ"
            this.responseText.classList.add('nothing-effect');
            
            if (i < responses.length - 1) {
                await this.sleep(2500);
            }
        }
        
        this.responseText.classList.remove('nothing-effect');
        await this.sleep(3000);
        this.showRestartButton();
    }

    showRestartButton() {
        this.restartBtn.style.display = 'inline-block';
        this.restartBtn.classList.add('bounce');
        setTimeout(() => this.restartBtn.classList.remove('bounce'), 600);
    }

    async restartGame() {
        this.currentScreen = 'start';
        this.gameMode = null;
        await this.showScreen('start-screen');
        this.restartBtn.style.display = 'none';
        
        // –£–±–∏—Ä–∞–µ–º –≤—Å–µ —ç—Ñ—Ñ–µ–∫—Ç—ã
        this.responseText.classList.remove('coffee-effect', 'tea-effect', 'water-effect', 'nothing-effect');
    }

    playLaughSound() {
        try {
            this.laughSound.currentTime = 0;
            this.laughSound.play();
        } catch (error) {
            console.log('–ù–µ —É–¥–∞–ª–æ—Å—å –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ—Å—Ç–∏ –∑–≤—É–∫');
        }
    }

    createParticles() {
        const container = document.querySelector('.content');
        for (let i = 0; i < 20; i++) {
            setTimeout(() => {
                const particle = document.createElement('div');
                particle.className = 'particle';
                particle.style.left = Math.random() * 100 + '%';
                particle.style.top = Math.random() * 100 + '%';
                particle.style.background = `hsl(${Math.random() * 360}, 70%, 60%)`;
                container.appendChild(particle);
                
                setTimeout(() => {
                    particle.remove();
                }, 3000);
            }, i * 100);
        }
    }

    sleep(ms) {
        return new Promise(resolve => setTimeout(resolve, ms));
    }
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–≥—Ä—ã –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
document.addEventListener('DOMContentLoaded', () => {
    new Game();
});

// –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —ç—Ñ—Ñ–µ–∫—Ç—ã –ø—Ä–∏ –∫–ª–∏–∫–µ –Ω–∞ –∫–Ω–æ–ø–∫–∏
document.addEventListener('click', (e) => {
    if (e.target.classList.contains('btn')) {
        // –°–æ–∑–¥–∞–µ–º —ç—Ñ—Ñ–µ–∫—Ç –ø—É–ª—å—Å–∞—Ü–∏–∏
        e.target.style.transform = 'scale(0.95)';
        setTimeout(() => {
            e.target.style.transform = '';
        }, 150);
    }
});

// –ó–∞–ø—Ä–µ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–≥–æ –º–µ–Ω—é
document.addEventListener('contextmenu', (e) => {
    e.preventDefault();
});

// –ó–∞–ø—Ä–µ—Ç –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏—è —ç–ª–µ–º–µ–Ω—Ç–æ–≤
document.addEventListener('dragstart', (e) => {
    e.preventDefault();
});

// –î–æ–±–∞–≤–ª—è–µ–º —Å–ª—É—á–∞–π–Ω—ã–µ –∞–Ω–∏–º–∞—Ü–∏–∏ —Ñ–æ–Ω–∞
setInterval(() => {
    const colors = ['#ff6b6b', '#4ecdc4', '#45b7d1', '#96ceb4', '#feca57', '#ff9ff3'];
    const randomColor = colors[Math.floor(Math.random() * colors.length)];
    
    const particle = document.createElement('div');
    particle.className = 'particle';
    particle.style.left = Math.random() * 100 + '%';
    particle.style.top = '100%';
    particle.style.background = randomColor;
    particle.style.animationDuration = (Math.random() * 3 + 2) + 's';
    
    document.body.appendChild(particle);
    
    setTimeout(() => {
        particle.remove();
    }, 5000);
}, 3000);
